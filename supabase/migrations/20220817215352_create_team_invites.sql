-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.team_invite
(
    inviter_id uuid NOT NULL,
    invitee_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT team_invite_pkey PRIMARY KEY (inviter_id, invitee_id),
    CONSTRAINT team_invite_invitee_id_fkey FOREIGN KEY (invitee_id)
        REFERENCES public.user (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT team_invite_inviter_id_fkey FOREIGN KEY (inviter_id)
        REFERENCES public.user (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.team_invite
    OWNER to postgres;

ALTER TABLE IF EXISTS public.team_invite
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.team_invite TO anon;

GRANT ALL ON TABLE public.team_invite TO authenticated;

GRANT ALL ON TABLE public.team_invite TO postgres;

GRANT ALL ON TABLE public.team_invite TO service_role;
CREATE POLICY "Enable delete for users based on user_id"
    ON public.team_invite
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = invitee_id));
CREATE POLICY "Enable insert for authenticated users only"
    ON public.team_invite
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK (true);
CREATE POLICY "Enable select for users based on user_id"
    ON public.team_invite
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (((auth.uid() = invitee_id) OR (auth.uid() = inviter_id)));

REVOKE ALL ON TABLE public.user_team FROM authenticated;
REVOKE ALL ON TABLE public.user_team FROM postgres;
REVOKE ALL ON TABLE public.user_team FROM service_role;
GRANT ALL ON TABLE public.user_team TO authenticated;

GRANT ALL ON TABLE public.user_team TO service_role;

GRANT ALL ON TABLE public.user_team TO postgres;
